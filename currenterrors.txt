warning: unused import: `MatMul`
 --> src/main.rs:6:24
  |
6 | use backend::{Backend, MatMul, Softmax};
  |                        ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::backend::Softmax`
 --> src/vk.rs:8:5
  |
8 | use crate::backend::Softmax;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `as_bytes`
   --> src/vk.rs:402:17
    |
402 |             let as_bytes = |ptr: *const u8, len_bytes: usize| unsafe {
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_as_bytes`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:13:9
   |
13 |     let mut data = vec![
   |         ----^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: trait `MatMul` is never used
 --> src/backend.rs:4:11
  |
4 | pub trait MatMul {
  |           ^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: struct `CpuBackend` is never constructed
  --> src/backend.rs:12:12
   |
12 | pub struct CpuBackend; // defined in cpu.rs (imported via crate::cpu::CpuBackend)
   |            ^^^^^^^^^^

warning: struct `VkBackend` is never constructed
  --> src/backend.rs:13:12
   |
13 | pub struct VkBackend;  // defined in vk.rs  (imported via crate::vk::VkBackend)
   |            ^^^^^^^^^

warning: multiple fields are never read
  --> src/vk.rs:18:5
   |
17 | pub struct VkBackend {
   |            --------- fields in this struct
18 |     entry: Entry,
   |     ^^^^^
...
23 |     qf_index: u32,
   |     ^^^^^^^^
24 |     use_f16: bool,
   |     ^^^^^^^
25 |     pipeline_layout: vk::PipelineLayout,
   |     ^^^^^^^^^^^^^^^
26 |     pipeline: vk::Pipeline,
   |     ^^^^^^^^
27 |     cmd_pool: vk::CommandPool,
28 |     query_pool: vk::QueryPool,
   |     ^^^^^^^^^^
29 |     desc_set_layout: vk::DescriptorSetLayout,
   |     ^^^^^^^^^^^^^^^
30 |     desc_pool: vk::DescriptorPool,
   |     ^^^^^^^^^

warning: structure field `M` should have a snake case name
  --> src/vk.rs:13:5
   |
13 |     M: u32, N: u32, K: u32,
   |     ^ help: convert the identifier to snake case: `m`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: structure field `N` should have a snake case name
  --> src/vk.rs:13:13
   |
13 |     M: u32, N: u32, K: u32,
   |             ^ help: convert the identifier to snake case: `n`

warning: structure field `K` should have a snake case name
  --> src/vk.rs:13:21
   |
13 |     M: u32, N: u32, K: u32,
   |                     ^ help: convert the identifier to snake case (notice the capitalization): `k`

warning: `pi5-llama` (bin "pi5-llama") generated 11 warnings (run `cargo fix --bin "pi5-llama"` to apply 2 suggestions)
